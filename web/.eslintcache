[{"C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\App.tsx":"1","C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\components\\Header\\styles.ts":"2","C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\pages\\Edit\\index.tsx":"3","C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\pages\\Register\\index.tsx":"4","C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\styles\\global.ts":"5","C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\index.tsx":"6"},{"size":437,"mtime":1722123823252,"results":"7","hashOfConfig":"8"},{"size":474,"mtime":1722123823256,"results":"9","hashOfConfig":"8"},{"size":7925,"mtime":1722133410236,"results":"10","hashOfConfig":"8"},{"size":6721,"mtime":1722133420351,"results":"11","hashOfConfig":"8"},{"size":586,"mtime":1722123823280,"results":"12","hashOfConfig":"8"},{"size":207,"mtime":1722123823257,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6900ew",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\App.tsx",[],"C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\components\\Header\\styles.ts",[],"C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\pages\\Edit\\index.tsx",[],"C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\pages\\Register\\index.tsx",["27"],"import React, { ChangeEvent, FormEvent, useCallback, useState } from 'react';\r\nimport axios from 'axios';\r\nimport * as Yup from 'yup';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport Header from '../../components/Header';\r\n\r\nimport { Container, Form, Input, InputMask, Button } from './styles';\r\nimport api from '../../services/api';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface ViaCepResponse {\r\n  bairro: string;\r\n  cep: string;\r\n  complemento: string;\r\n  ddd: string;\r\n  gia: string;\r\n  ibge: string;\r\n  localidade: string;\r\n  logradouro: string;\r\n  siafi: string;\r\n  uf: string;\r\n}\r\n\r\nconst Register: React.FC = () => {\r\n  const [name, setName] = useState<string>('');\r\n  const [crm, setCrm] = useState<string>('');\r\n  const [phoneNumber, setPhoneNumber] = useState<string>('');\r\n  const [cellphoneNumber, setCellphoneNumber] = useState<string>('');\r\n  const [zipcode, setZipcode] = useState<string>('');\r\n  const [street, setStreet] = useState<string>('');\r\n  const [city, setCity] = useState<string>('');\r\n  const [state, setState] = useState<string>('');\r\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\r\n\r\n  const history = useHistory();\r\n\r\n  const handleAssignCEP = useCallback(\r\n    async (event: ChangeEvent<HTMLInputElement>) => {\r\n      try {\r\n        const parsedZipcode = event.target.value.replace('-', '').trim();\r\n\r\n        if (parsedZipcode.length <= 7) {\r\n          return;\r\n        }\r\n\r\n        const response = await axios.get<ViaCepResponse>(\r\n          `https://viacep.com.br/ws/${parsedZipcode}/json/`\r\n        );\r\n\r\n        if (response.data.cep) {\r\n          setZipcode(response.data.cep);\r\n          setCity(response.data.localidade);\r\n          setState(response.data.uf);\r\n          setStreet(response.data.logradouro);\r\n        } else {\r\n          toast.error('CEP não encontrado.');\r\n        }\r\n      } catch (err) {\r\n        const e = new ErrorEvent('error', {\r\n          message: 'my error',\r\n        });\r\n        window.dispatchEvent(e);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleSelectSpecialty = useCallback(\r\n    (specialty) => {\r\n      const alreadySelected = selectedItems.findIndex(\r\n        (item) => item === specialty\r\n      );\r\n\r\n      if (alreadySelected >= 0) {\r\n        const filteredItems = selectedItems.filter(\r\n          (item) => item !== specialty\r\n        );\r\n\r\n        setSelectedItems(filteredItems);\r\n      } else {\r\n        setSelectedItems([...selectedItems, specialty]);\r\n      }\r\n    },\r\n    [selectedItems]\r\n  );\r\n\r\n  const handleSubmit = useCallback(\r\n    async (event: FormEvent) => {\r\n      event?.preventDefault();\r\n\r\n      const data = {\r\n        name,\r\n        crm,\r\n        phone_number: phoneNumber,\r\n        cellphone_number: cellphoneNumber,\r\n        cep: zipcode.replace('-', '').trim(),\r\n        street,\r\n        state,\r\n        city,\r\n        specialties: selectedItems,\r\n      };\r\n\r\n      const schema = Yup.object().shape({\r\n        name: Yup.string().required('Nome é obrigatório'),\r\n        crm: Yup.string().required('CRM é obrigatório'),\r\n        phone_number: Yup.string(),\r\n        cellphone_number: Yup.string().required(\r\n          'Número de celular é obrigatório'\r\n        ),\r\n        cep: Yup.string().required('CEP é obrigatório'),\r\n        street: Yup.string().required('Rua é obrigatório'),\r\n        state: Yup.string().required('Estado é obrigatório'),\r\n        city: Yup.string().required('Cidade é obrigatório'),\r\n        specialties: Yup.array()\r\n          .min(2)\r\n          .max(8)\r\n          .required('Ao menos duas especialidades é obrigatória'),\r\n      });\r\n\r\n      const valid = await schema.isValid(data);\r\n\r\n      /* if (!valid) {\r\n        toast.error('Existem campo(s) inválidos, verificar novamente...');\r\n        return;\r\n      } */\r\n\r\n      await api.post('doctors', {\r\n        ...data,\r\n        specialties: selectedItems.join(', '),\r\n      });\r\n\r\n      toast.success('Doutor cadastrado com sucesso!');\r\n\r\n      history.push('/');\r\n    },\r\n    [\r\n      name,\r\n      crm,\r\n      phoneNumber,\r\n      cellphoneNumber,\r\n      zipcode,\r\n      street,\r\n      state,\r\n      city,\r\n      selectedItems,\r\n      history,\r\n    ]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container>\r\n        <Form onSubmit={handleSubmit}>\r\n          <h2>Cadastrar Doutor(a)</h2>\r\n          <Input\r\n            placeholder='Nome do médico'\r\n            value={name}\r\n            onChange={(e: any) => setName(e.target.value)}\r\n          />\r\n          <InputMask\r\n            placeholder='CRM'\r\n            format='##.###.##'\r\n            value={crm}\r\n            onChange={(e: any) => setCrm(e.target.value)}\r\n          />\r\n          <InputMask\r\n            placeholder='Telefone Fixo'\r\n            format='(##) ####-####'\r\n            value={phoneNumber}\r\n            onChange={(e: any) => setPhoneNumber(e.target.value)}\r\n          />\r\n          <InputMask\r\n            placeholder='Telefone Celular'\r\n            format='(##) #####-####'\r\n            value={cellphoneNumber}\r\n            onChange={(e: any) => setCellphoneNumber(e.target.value)}\r\n          />\r\n          <InputMask\r\n            placeholder='CEP'\r\n            format='#####-###'\r\n            onChange={handleAssignCEP}\r\n            value={zipcode}\r\n          />\r\n          <Input\r\n            placeholder='UF'\r\n            value={state}\r\n            onChange={(e: any) => setState(e.target.value)}\r\n          />\r\n          <Input\r\n            placeholder='Cidade'\r\n            value={city}\r\n            onChange={(e: any) => setCity(e.target.value)}\r\n          />\r\n          <Input\r\n            placeholder='Rua'\r\n            value={street}\r\n            onChange={(e: any) => setStreet(e.target.value)}\r\n          />\r\n          <fieldset>\r\n            <legend>\r\n              <h2>Especialidades</h2>\r\n              <span>Selecione duas ou mais especialidades abaixo</span>\r\n            </legend>\r\n\r\n            <ul className='items-grid'>\r\n              {specialtiesAvailable.map((item) => (\r\n                <li\r\n                  key={item}\r\n                  onClick={() => handleSelectSpecialty(item)}\r\n                  className={selectedItems.includes(item) ? 'selected' : ''}\r\n                >\r\n                  <span>{item}</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </fieldset>\r\n\r\n          <Button type='submit'>Cadastrar</Button>\r\n        </Form>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n\r\nconst specialtiesAvailable = [\r\n  'ALERGOLOGIA',\r\n  'ANGIOLOGIA',\r\n  'BUCO MAXILO',\r\n  'CARDIOLOGIA CLÍNICA',\r\n  'CARDIOLOGIA INFANTIL',\r\n  'CIRURGIA CABEÇA E PESCOÇO',\r\n  'CIRURGIA CARDÍACA',\r\n  'CIRURGIA DE TÓRAX',\r\n];\r\n","C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\styles\\global.ts",[],"C:\\Users\\gabzi\\OneDrive\\Documentos\\react_node\\case-full-stack-developer\\web\\src\\index.tsx",[],{"ruleId":"28","severity":1,"message":"29","line":121,"column":13,"nodeType":"30","messageId":"31","endLine":121,"endColumn":18},"@typescript-eslint/no-unused-vars","'valid' is assigned a value but never used.","Identifier","unusedVar"]